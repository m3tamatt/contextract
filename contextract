#!/bin/bash
# Name: contextract - v0.1

# ----- Configuration -----
MAX_RETRIES=3
API_TIMEOUT=300  # seconds
CONTEXT_LIMIT=6000000
RETRY_DELAY=2

# ----- Functions -----
die() {
    echo "‚ùå Error: $1" >&2
    exit 1
}

sanitize_input() {
    echo "$1" | tr -d '\0' | head -c 2048
}

validate_environment() {
    command -v node >/dev/null || die "Node.js not installed"
    command -v npm >/dev/null || die "npm not installed"
    command -v curl >/dev/null || die "curl not installed"
    [ -n "${DEEPINFRA_API_KEY:-}" ] || die "Set DEEPINFRA_API_KEY environment variable"
    
    GLOBAL_NODE_MODULES=$(npm root -g)
    
    local required_packages=("minimist" "directory-tree" "axios" "fs-extra")
    for pkg in "${required_packages[@]}"; do
        if [ ! -d "${GLOBAL_NODE_MODULES}/${pkg}" ]; then
            die "Missing npm package: $pkg (install globally with 'npm install -g $pkg')"
        fi
    done
}

generate_tree_summary() {
    local extensions="$1"
    local tmp_script=$(mktemp).cjs

    cat > "$tmp_script" << 'EOF'
const fs = require('node:fs');
const path = require('node:path');
const { promisify } = require('node:util');
const minimist = require('minimist');
const directoryTree = require('directory-tree');
const axios = require('axios');
const fse = require('fs-extra');

const readFile = promisify(fs.readFile);
const writeFile = promisify(fs.writeFile);
const MAX_RETRIES = 3;
const RETRY_DELAY = 1000;

function formatTree(node, prefix = '', isLast = true) {
    let result = '';
    const currentPrefix = isLast ? '‚îî‚îÄ‚îÄ ' : '‚îú‚îÄ‚îÄ ';
    
    if (node.type === 'directory') {
        result += `${prefix}${currentPrefix}${node.name}/\n`;
        const childPrefix = prefix + (isLast ? '    ' : '‚îÇ   ');
        
        node.children.forEach((child, index) => {
            result += formatTree(child, childPrefix, index === node.children.length - 1);
        });
    } else {
        result += `${prefix}${currentPrefix}${node.name}\n`;
    }
    
    return result;
}

function collectFiles(node) {
    const files = [];
    function traverse(currentNode) {
        if (currentNode.type === 'file') {
            files.push({
                path: path.relative(process.cwd(), currentNode.path),
                name: currentNode.name,
                content: fs.readFileSync(currentNode.path, 'utf8')
            });
        }
        if (currentNode.children) {
            currentNode.children.forEach(traverse);
        }
    }
    traverse(node);
    return files;
}

async function summarizeContent(content) {
    try {
        const response = await axios.post(
            'https://api.deepinfra.com/v1/openai/chat/completions',
            {
                model: 'NousResearch/Hermes-3-Llama-3.1-405B',
                messages: [{
                    role: 'user',
                    content: `Provide a concise technical summary of this code file. Include:
- Key imports/exports
- Main functions/classes
- Core logic flow
- Critical configurations
- Notable error handling
Keep technical details precise but avoid implementation specifics.\n\n${content}`
                }],
                temperature: 0.2,
                max_tokens: 500
            },
            {
                headers: {
                    'Authorization': `Bearer ${process.env.DEEPINFRA_API_KEY}`,
                    'Content-Type': 'application/json'
                }
            }
        );
        return response.data.choices[0].message.content.trim();
    } catch (error) {
        console.error('API Error:', error.response?.data || error.message);
        throw error;
    }
}

async function main() {
    const args = minimist(process.argv.slice(2));
    const extensions = args.e ? args.e.split(' ') : [];

    if (!extensions.length) {
        console.error('Please specify extensions using -e flag');
        process.exit(1);
    }
    
    const extPattern = new RegExp(
        `\\.(${extensions
            .map(ext => {
                const cleanExt = ext.startsWith('.') ? ext.slice(1) : ext;
                return cleanExt.replace(/\./g, '\\.');
            })
            .join('|')})$`,
        'i'
    );
    
    const tree = directoryTree(process.cwd(), {
        extensions: extPattern,
        normalizePath: true,
        attributes: ['type', 'extension'],
        exclude: /(^|[/\\])(node_modules|dist|build|coverage|.cache|.next|out)([/\\]|$)/i
    });

    const treeString = formatTree(tree);
    await fse.outputFile('fullTree.md', generateMarkdown(treeString, tree));

    const files = collectFiles(tree);
    const summaries = await processFiles(files);
    
    await fse.outputFile('fullTreeSummary.md', generateSummaryMarkdown(treeString, summaries));
}

async function processFiles(files) {
    const summaryPromises = files.map(async (file) => {
        try {
            const summary = await retryableSummarize(file.content);
            return { ...file, summary };
        } catch (error) {
            console.error(`Failed to summarize ${file.path} after ${MAX_RETRIES} attempts`);
            return { ...file, summary: `Summary unavailable: ${error.message}` };
        }
    });

    return Promise.all(summaryPromises);
}

async function retryableSummarize(content) {
    for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {
        try {
            return await summarizeContent(content);
        } catch (error) {
            if (attempt === MAX_RETRIES) throw error;
            await new Promise(resolve => setTimeout(resolve, RETRY_DELAY * attempt));
        }
    }
}

function generateMarkdown(treeString, tree) {
    let md = `# Directory Structure\n\`\`\`\n${treeString}\`\`\`\n\n# File Contents\n`;
    
    function addContents(node) {
        if (node.type === 'file') {
            md += `\n## ${node.name}\n\`\`\`typescript\n${fs.readFileSync(node.path, 'utf8')}\n\`\`\`\n`;
        }
        if (node.children) {
            node.children.forEach(addContents);
        }
    }
    
    addContents(tree);
    return md;
}

function generateSummaryMarkdown(treeString, summaries) {
    let md = `# Directory Structure\n\`\`\`\n${treeString}\`\`\`\n\n# File Summaries\n`;
    
    summaries.forEach(({ path, name, summary }) => {
        md += `\n## ${path}\n${summary}\n`;
    });
    
    return md;
}

main().catch(err => {
    console.error(err);
    process.exit(1);
});
EOF

    NODE_PATH=$(npm root -g) node "$tmp_script" -e "$extensions" || die "Failed to generate project summary"
    rm "$tmp_script"
}

# ----- Main Execution -----
validate_environment

# Argument parsing with proper ordering
USE_EXISTING=false
EXTENSIONS=""
PROMPT=""

while [[ $# -gt 0 ]]; do
    case "$1" in
        -e|--extensions)
            EXTENSIONS="$2"
            shift 2
            ;;
        -p|--prompt)
            PROMPT="$2"
            shift 2
            ;;
        -exist|--existing)
            USE_EXISTING=true
            shift
            ;;
        *)
            die "Unknown option: $1"
            ;;
    esac
done

# Strict argument validation
if [ -z "$PROMPT" ]; then
    die "Missing required argument: -p/--prompt"
fi

if [ "$USE_EXISTING" = false ]; then
    if [ -z "$EXTENSIONS" ]; then
        die "Missing required argument: -e/--extensions (required when not using -exist)"
    fi
    echo "üå≥ Generating NEW project structure for extensions: $EXTENSIONS..."
    generate_tree_summary "$EXTENSIONS"
else
    if [ ! -f "fullTreeSummary.md" ] || [ ! -s "fullTreeSummary.md" ]; then
        die "Existing summary not found. Generate first without -exist flag."
    fi
    echo "üìÅ Using EXISTING project summary (fullTreeSummary.md)..."
fi

# Content validation
STRUCTURE=$(<fullTreeSummary.md)
# Remove directory structure part (everything between # Directory Structure and # File Summaries)
STRUCTURE=$(echo "$STRUCTURE" | sed -n '/# File Summaries/,$p')
SANITIZED_PROMPT=$(sanitize_input "$PROMPT")
FULL_CONTEXT="Project Structure:\n$STRUCTURE\n\nYour task is to match the files a user needs for context, to accomplish his request, User's Request is provided in the context, below. You MUST respond ONLY with /add command listing required files. No explanations, no <tags>, only /add .... ONLY add existing files from the context, make sure to not add inexisting files. Example: /add src/components/page.tsx src/components/bots/page.tsx. User Request: $SANITIZED_PROMPT"
CONTEXT_SIZE=$(echo -ne "$FULL_CONTEXT" | wc -c)

if [ "$CONTEXT_SIZE" -gt "$CONTEXT_LIMIT" ]; then
    die "Context size exceeds limit (${CONTEXT_SIZE} > ${CONTEXT_LIMIT})"
fi

# API Processing with enhanced validation
# API Processing with enhanced validation
echo "üß† Processing with Deepinfra API (max $MAX_RETRIES retries)..."
for ((attempt=1; attempt<=MAX_RETRIES; attempt++)); do
    # Create temporary files
    tmp_request=$(mktemp)

    # Sanitize the context properly for JSON
    SANITIZED_CONTEXT=$(echo "$FULL_CONTEXT" | jq -Rs .)

    # Create the request JSON with properly escaped content
    cat > "$tmp_request" << EOF
{
    "model": "NousResearch/Hermes-3-Llama-3.1-405B",
    "messages": [
        {
            "role": "system",
            "content": "Your task is to match the files a user needs for context, to accomplish his request, User's Request is provided in the context, below. You MUST respond ONLY with /add command listing required files. No explanations, no <tags>, only /add .... ONLY add existing files from the context, make sure to not add inexisting files. Example: /add src/components/page.tsx src/components/bots/page.tsx"
        },
        {
            "role": "user",
            "content": ${SANITIZED_CONTEXT}
        }
    ],
    "temperature": 0.2,
    "max_tokens": 500
}
EOF

    # Then check size and truncate if needed
    request_size=$(wc -c < "$tmp_request")
    if [ "$request_size" -gt 100000000 ]; then
        echo "‚ö†Ô∏è Truncating large context from ${request_size} bytes to 90000 bytes"
        TRUNCATED_CONTEXT=$(echo "$FULL_CONTEXT" | head -c 90000)
        SANITIZED_TRUNCATED_CONTEXT=$(echo "$TRUNCATED_CONTEXT" | jq -Rs .)
        
        # Recreate request with truncated context
        cat > "$tmp_request" << EOF
{
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct",
    "messages": [
        {
            "role": "system",
            "content": "You are a helpful assistant. You MUST respond ONLY with /add command listing required files. No explanations. ONLY add existing files from the context, make sure to not add inexisting files. Example: /add src/components/page.tsx src/components/bots/page.tsx"
        },
        {
            "role": "user",
            "content": ${SANITIZED_TRUNCATED_CONTEXT}
        }
    ],
    "temperature": 0.2,
    "max_tokens": 500
}
EOF
    fi

    # Save request to file for debugging
    echo "Full API Request:" > api_debug.log
    cat "$tmp_request" >> api_debug.log
    echo -e "\nRequest size: $request_size bytes\n" >> api_debug.log

    # Make API call and save full response
    response=$(curl -s \
        -H "Authorization: Bearer $DEEPINFRA_API_KEY" \
        -H "Content-Type: application/json" \
        -H "Accept: application/json" \
        -d @"$tmp_request" \
        -w "\n%{http_code}" \
        "https://api.deepinfra.com/v1/openai/chat/completions")

    # Split response into body and status code
    http_code=$(echo "$response" | tail -n1)
    body=$(echo "$response" | sed '$ d')

    # Save response to debug file
    echo "HTTP Status: $http_code" >> api_debug.log
    echo "Response Body:" >> api_debug.log
    echo "$body" >> api_debug.log

    # Check for error status codes
    if [ "$http_code" -eq 500 ]; then
        echo "‚ùå Server error (500). Response:"
        echo "$body"
        echo "Context size: $(wc -c < "$tmp_request") bytes"
        sleep "$RETRY_DELAY"
        continue
    fi

    # Extract content from response
    result=$(echo "$body" | jq -r '.choices[0].message.content' 2>/dev/null)
    
    if [ -z "$result" ] || [ "$result" = "null" ]; then
        echo "‚ùå Failed to parse response:"
        echo "$body"
        sleep "$RETRY_DELAY"
        continue
    fi

    echo "Response:"
    echo "$result"
    # Validate response starts with /add
    if [[ ! "$result" =~ ^/add ]]; then
        echo "‚ùå Invalid response format (doesn't start with /add)"
        echo "Full response saved to api_debug.log"
        sleep "$RETRY_DELAY"
        continue
    fi


    rm "$tmp_request"
    exit 0
done

die "Failed to get valid response after $MAX_RETRIES attempts. Check api_debug.log for details"
